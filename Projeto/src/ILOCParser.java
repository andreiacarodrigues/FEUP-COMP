/* ILOCParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ILOCParser.java */
import java.util.Arrays;
public class ILOCParser/*@bgen(jjtree)*/implements ILOCParserTreeConstants, ILOCParserConstants {/*@bgen(jjtree)*/
  protected static JJTILOCParserState jjtree = new JJTILOCParserState();public static void main(String args[]) throws Exception
        {
                java.io.FileInputStream fis = new java.io.FileInputStream("test");
                ILOCParser myParser = new ILOCParser(fis);
                SimpleNode node = myParser.ILOCProgram();

                node.dump("");
        }

  static final public SimpleNode ILOCProgram() throws ParseException {/*@bgen(jjtree) ILOCProgram */
  SimpleNode jjtn000 = new SimpleNode(JJTILOCPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InstructionList();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void InstructionList() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LABEL:{
      t = jj_consume_token(LABEL);
SimpleNode jjtn001 = new SimpleNode(JJTLABEL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
jjtn001.value = new LabelData(t.image);
      } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      jj_consume_token(COLON);
      Instruction();
      InstructionList();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_1(2147483647)) {
        Instruction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NORMALOPCODE:
        case CBR:
        case JUMPL:
        case JUMP:
        case OPENSQUAREBRACKET:{
          Instruction();
          InstructionList();
          break;
          }
        case 0:{
          jj_consume_token(0);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void Instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPENSQUAREBRACKET:{
      jj_consume_token(OPENSQUAREBRACKET);
      OperationList();
      jj_consume_token(CLOSESQUAREBRACKET);
      break;
      }
    case NORMALOPCODE:
    case CBR:
    case JUMPL:
    case JUMP:{
      Operation();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void OperationList() throws ParseException {
    if (jj_2_2(2147483647)) {
      Operation();
      jj_consume_token(SEMICOLON);
      OperationList();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NORMALOPCODE:
      case CBR:
      case JUMPL:
      case JUMP:{
        Operation();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Operation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORMALOPCODE:{
      NormalOp();
      break;
      }
    case CBR:
    case JUMPL:
    case JUMP:{
      ControlFlowOp();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NormalOp() throws ParseException {/*@bgen(jjtree) NormalOp */
                  SimpleNode jjtn000 = new SimpleNode(JJTNORMALOP);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token[] t1, t2; Token t3;
    try {
      t3 = jj_consume_token(NORMALOPCODE);
      t1 = OperandList();
      jj_consume_token(ASSIGN);
      t2 = OperandList();
jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
jjtn000.value = new NormalOpData(t1, t2, t3);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public Token[] OperandList() throws ParseException {Token t1; Token[] t2;
    if (jj_2_3(2147483647)) {
      t1 = Operand();
      jj_consume_token(COMMA);
      t2 = OperandList();
Token[] tokens = new Token[t2.length + 1]; tokens[0] = t1; for(int i = 0; i < t2.length; i++){tokens[i+1] = t2[i];} {if ("" != null) return tokens;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTER:
      case LABEL:
      case INTEGER:{
        t1 = Operand();
Token[] tokens = {t1}; {if ("" != null) return tokens;}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token Operand() throws ParseException {/*@bgen(jjtree) Operand */
                  SimpleNode jjtn000 = new SimpleNode(JJTOPERAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTER:{
        t1 = jj_consume_token(REGISTER);
        break;
        }
      case INTEGER:{
        t1 = jj_consume_token(INTEGER);
        break;
        }
      case LABEL:{
        t1 = jj_consume_token(LABEL);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return t1;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ControlFlowOp() throws ParseException {/*@bgen(jjtree) ControlFlowOp */
                       SimpleNode jjtn000 = new SimpleNode(JJTCONTROLFLOWOP);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t1, t2, t3;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CBR:{
        jj_consume_token(CBR);
        t3 = jj_consume_token(REGISTER);
        jj_consume_token(JUMPARROW);
        t1 = jj_consume_token(LABEL);
        jj_consume_token(COMMA);
        t2 = jj_consume_token(LABEL);
jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
jjtn000.value = new ControlFlowOpData(t1.image, t2.image, t3.image);
        break;
        }
      case JUMPL:{
        jj_consume_token(JUMPL);
        jj_consume_token(JUMPARROW);
        t1 = jj_consume_token(LABEL);
jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
jjtn000.value = new ControlFlowOpData(t1.image);
        break;
        }
      case JUMP:{
        jj_consume_token(JUMP);
        jj_consume_token(JUMPARROW);
        jj_consume_token(REGISTER);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_7()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static private boolean jj_3R_6()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_2()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_3R_2()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_5()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_1()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  static private boolean jj_3R_4()
 {
    if (jj_scan_token(OPENSQUAREBRACKET)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(CLOSESQUAREBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(JUMP)) return true;
    if (jj_scan_token(JUMPARROW)) return true;
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(JUMPL)) return true;
    if (jj_scan_token(JUMPARROW)) return true;
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(CBR)) return true;
    if (jj_scan_token(REGISTER)) return true;
    if (jj_scan_token(JUMPARROW)) return true;
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  static private boolean jj_3R_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_scan_token(NORMALOPCODE)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ILOCParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x17081,0x17080,0x7080,0x7080,0x1c0000,0x1c0000,0x7000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ILOCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ILOCParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ILOCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ILOCParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ILOCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ILOCParser(ILOCParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ILOCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
