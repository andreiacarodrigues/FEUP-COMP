/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. proj.jj */
/*@egen*/options
{
 LOOKAHEAD=1;
}
PARSER_BEGIN(ILOCParser)
import java.util.Arrays;
public class ILOCParser/*@bgen(jjtree)*/implements ILOCParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTILOCParserState jjtree = new JJTILOCParserState();

/*@egen*/
 	public static void main(String args[]) throws Exception
 	{
 	  	java.io.FileInputStream fis = new java.io.FileInputStream("test");
		ILOCParser myParser = new ILOCParser(fis);
		SimpleNode node = myParser.ILOCProgram();

		node.dump("");
 	}
}
PARSER_END(ILOCParser)
SKIP:
{
    " " | "\r" | "\t" | "\n" | <"//"(~["\n"])*"\n">
}
TOKEN:
{
    <STACKPOINTERREGISTER: "rarp"> |
    <NORMALOPCODE:
        "nop"|
        "add"|"sub"|"mult"|"div"|
        "addI"|"subI"|"rsubI"|"multI"|"divI" |"rdivI"|
        "lshift"|"lshiftI"|"rshift"|"rshiftI"|
        "and"|"andI"|"or"|"orI"|"xor"|"xorI"|
        "loadI"|"load"|"loadAI"|"loadA0"|
        "cload"|"cloadAI"|"cloadA0"|
        "store"|"storeAI"|"storeA0"|
        "cstore"|"cstoreAI"|"cstoreA0"|
        "i2i"|"c2c"|"c2i"|"i2c"|
        "cmp_LI"|"cmp_LE"|"cmp_EQ"|"cmp_GE"|"cmp_GT"|"cmp_NE"> |
    <ASSIGN: "=>"> |
    <COLON: ":"> |
    <SEMICOLON: ";"> |
    <COMMA: ","> |
    <CBR: "cbr"> |
    <JUMPL: "jumpl"> |
    <JUMP: "jump"> |
    <JUMPARROW: "->"> |
    <OPENSQUAREBRACKET: "["> |
    <CLOSESQUAREBRACKET: "]"> |
    <REGISTER: "r"(["0"-"9"])+> |
    <LABEL: ["a"-"z"](["a"-"z"] | ["0"-"9"] | "-")*> |
    <INTEGER: "0" | ["1"-"9"](["0"-"9"])*>
}
SimpleNode ILOCProgram() : {/*@bgen(jjtree) ILOCProgram */
  SimpleNode jjtn000 = new SimpleNode(JJTILOCPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ILOCProgram */
        try {
/*@egen*/
  	InstructionList() <EOF>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InstructionList()      : {Token t; }
{
    t=<LABEL>/*@bgen(jjtree) LABEL */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTLABEL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
              }
/*@egen*/ {jjtn001.value = new LabelData(t.image);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/        <COLON> Instruction() InstructionList() |
    LOOKAHEAD(Instruction() <EOF>)
    Instruction() |
    Instruction() InstructionList() |
    <EOF>

}

void Instruction()      : {}
{
    <OPENSQUAREBRACKET> OperationList() <CLOSESQUAREBRACKET> |
    Operation()
}

void OperationList()      : {}
{
    LOOKAHEAD(Operation() <SEMICOLON>)
    Operation() <SEMICOLON> OperationList()|
  	Operation()
}

void Operation()      : {}
{
  	NormalOp() |
  	ControlFlowOp()
}

void NormalOp(): {/*@bgen(jjtree) NormalOp */
                  SimpleNode jjtn000 = new SimpleNode(JJTNORMALOP);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token[] t1, t2; Token t3;}
{/*@bgen(jjtree) NormalOp */
        try {
/*@egen*/
  	(t3=<NORMALOPCODE> t1=OperandList() <ASSIGN> t2=OperandList())/*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                      }
/*@egen*/{jjtn000.value = new NormalOpData(t1, t2, t3);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token[] OperandList()      : {Token t1; Token[] t2;}
{
    LOOKAHEAD(Operand() <COMMA>)
    (t1=Operand() <COMMA> t2=OperandList())
    {Token[] tokens = new Token[t2.length + 1]; tokens[0] = t1; for(int i = 0; i < t2.length; i++){tokens[i+1] = t2[i];} return tokens;} |
  	(t1=Operand()) {Token[] tokens = {t1}; return tokens;}
}

Token Operand(): {/*@bgen(jjtree) Operand */
                  SimpleNode jjtn000 = new SimpleNode(JJTOPERAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) Operand */
        try {
/*@egen*/
	(t1=<REGISTER> |
	t1=<INTEGER> |
	t1=<LABEL>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return t1;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ControlFlowOp(): {/*@bgen(jjtree) ControlFlowOp */
                       SimpleNode jjtn000 = new SimpleNode(JJTCONTROLFLOWOP);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2, t3;}
{/*@bgen(jjtree) ControlFlowOp */
        try {
/*@egen*/
	(<CBR> t3=<REGISTER> <JUMPARROW> t1=<LABEL> <COMMA> t2=<LABEL>)/*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                        }
/*@egen*/ {jjtn000.value = new ControlFlowOpData(t1.image, t2.image, t3.image);} |
	(<JUMPL> <JUMPARROW> t1=<LABEL>)/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ {jjtn000.value = new ControlFlowOpData(t1.image);} |
	<JUMP> <JUMPARROW> <REGISTER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}